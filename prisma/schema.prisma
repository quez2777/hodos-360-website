// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  name        String?
  isAdmin     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  cases       Case[]
  clients     Client[]
  documents   Document[]
  campaigns   MarketingCampaign[]
}

model Client {
  id            String   @id @default(uuid())
  firstName     String
  lastName      String
  email         String
  phone         String?
  company       String?
  address       String?
  status        String   @default("active") // active, inactive, archived
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cases         Case[]
  
  @@index([userId])
  @@index([email])
}

model Case {
  id            String   @id @default(uuid())
  title         String
  description   String?
  caseType      String   // litigation, corporate, family, criminal, etc.
  status        String   @default("open") // open, pending, closed, archived
  priority      String   @default("medium") // low, medium, high, urgent
  startDate     DateTime @default(now())
  endDate       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  clientId      String
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  client        Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  documents     Document[]
  
  @@index([userId])
  @@index([clientId])
  @@index([status])
}

model Document {
  id            String   @id @default(uuid())
  filename      String
  originalName  String
  fileSize      Int
  mimeType      String
  fileHash      String?
  filePath      String
  category      String   @default("general") // contract, evidence, correspondence, etc.
  description   String?
  isConfidential Boolean @default(false)
  uploadedAt    DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  caseId        String?
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  case          Case?    @relation(fields: [caseId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([caseId])
  @@index([category])
}

model MarketingCampaign {
  id            String   @id @default(uuid())
  name          String
  description   String?
  type          String   // email, seo, ppc, social, content
  status        String   @default("draft") // draft, active, paused, completed, cancelled
  budget        Float?
  spent         Float    @default(0)
  startDate     DateTime?
  endDate       DateTime?
  targetAudience String?
  goals         Json?    // JSON object with campaign goals and KPIs
  metrics       Json?    // JSON object with performance metrics
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([type])
}

model AuditLog {
  id              String   @id @default(uuid())
  action          String
  userId          String
  documentId      String?
  filename        String?
  fileHash        String?
  virusScanResult Json?
  timestamp       DateTime @default(now())
}
