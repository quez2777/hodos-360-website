// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  name        String?
  isAdmin     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  cases       Case[]
  clients     Client[]
  documents   Document[]
  campaigns   MarketingCampaign[]
  blogPosts   BlogPost[]
}

model Client {
  id            String   @id @default(uuid())
  firstName     String
  lastName      String
  email         String
  phone         String?
  company       String?
  address       String?
  status        String   @default("active") // active, inactive, archived
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cases         Case[]
  
  @@index([userId])
  @@index([email])
}

model Case {
  id            String   @id @default(uuid())
  title         String
  description   String?
  caseType      String   // litigation, corporate, family, criminal, etc.
  status        String   @default("open") // open, pending, closed, archived
  priority      String   @default("medium") // low, medium, high, urgent
  startDate     DateTime @default(now())
  endDate       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  clientId      String
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  client        Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  documents     Document[]
  
  @@index([userId])
  @@index([clientId])
  @@index([status])
}

model Document {
  id            String   @id @default(uuid())
  filename      String
  originalName  String
  fileSize      Int
  mimeType      String
  fileHash      String?
  filePath      String
  category      String   @default("general") // contract, evidence, correspondence, etc.
  description   String?
  isConfidential Boolean @default(false)
  uploadedAt    DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  caseId        String?
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  case          Case?    @relation(fields: [caseId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([caseId])
  @@index([category])
}

model MarketingCampaign {
  id            String   @id @default(uuid())
  name          String
  description   String?
  type          String   // email, seo, ppc, social, content
  status        String   @default("draft") // draft, active, paused, completed, cancelled
  budget        Float?
  spent         Float    @default(0)
  startDate     DateTime?
  endDate       DateTime?
  targetAudience String?
  goals         Json?    // JSON object with campaign goals and KPIs
  metrics       Json?    // JSON object with performance metrics
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([type])
}

model DemoBooking {
  id              String   @id @default(uuid())
  email           String
  name            String?
  company         String?
  phone           String?
  specialRequests String?
  preferredDate   DateTime?
  preferredTime   String?
  scheduledDate   DateTime?
  scheduledTime   String?
  status          String   @default("scheduled") // scheduled, confirmed, completed, cancelled, no-show
  meetingLink     String?
  calendarLink    String?
  demoType        String   @default("video-call") // video-call, phone, in-person
  duration        String   @default("30 minutes")
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([email])
  @@index([status])
  @@index([scheduledDate])
}

model AuditLog {
  id              String   @id @default(uuid())
  action          String
  userId          String
  documentId      String?
  filename        String?
  fileHash        String?
  virusScanResult Json?
  timestamp       DateTime @default(now())
}

// Blog System Models
model BlogPost {
  id              String   @id @default(uuid())
  title           String
  slug            String   @unique
  content         String   // Full HTML content
  excerpt         String?  // Meta description/excerpt
  featuredImage   String?  // URL to featured image
  status          String   @default("draft") // draft, scheduled, published, archived
  publishedAt     DateTime?
  scheduledFor    DateTime?
  readingTime     Int?     // Estimated reading time in minutes
  metaTitle       String?  // SEO meta title
  metaDescription String?  // SEO meta description
  keywords        String[] // SEO keywords array
  internalLinks   Json?    // Auto-generated internal links
  schemaMarkup    Json?    // JSON-LD schema markup
  seoScore        Int?     // SEO optimization score (0-100)
  views           Int      @default(0)
  shares          Int      @default(0)
  aiGenerated     Boolean  @default(false)
  generationPrompt String? // Original AI generation prompt
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  authorId        String

  // Relations
  author          User            @relation(fields: [authorId], references: [id])
  categories      BlogCategory[]
  tags            BlogTag[]
  analytics       BlogAnalytics[]

  @@index([slug])
  @@index([status])
  @@index([publishedAt])
  @@index([authorId])
}

model BlogCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?  // Hex color for UI
  seoTitle    String?
  seoDescription String?
  postCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts       BlogPost[]

  @@index([slug])
}

model BlogTag {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  postCount   Int      @default(0)
  createdAt   DateTime @default(now())

  // Relations
  posts       BlogPost[]

  @@index([slug])
}

model BlogAnalytics {
  id              String   @id @default(uuid())
  postId          String
  date            DateTime @default(now())
  views           Int      @default(0)
  uniqueViews     Int      @default(0)
  timeOnPage      Int?     // Average time in seconds
  bounceRate      Float?   // Percentage
  clickThroughRate Float?  // Percentage
  socialShares    Int      @default(0)
  organicTraffic  Int      @default(0)
  referralTraffic Int      @default(0)
  keywordRankings Json?    // Keyword position tracking

  // Relations
  post            BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([date])
}

model ContentCalendar {
  id            String   @id @default(uuid())
  title         String
  scheduledDate DateTime
  postType      String   @default("blog") // blog, social, email
  status        String   @default("planned") // planned, in_progress, completed, cancelled
  assignedTo    String?  // User ID
  category      String
  keywords      String[]
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([scheduledDate])
  @@index([status])
}

model SEOKeyword {
  id            String   @id @default(uuid())
  keyword       String   @unique
  difficulty    Int?     // 0-100 difficulty score
  searchVolume  Int?     // Monthly search volume
  currentRank   Int?     // Current ranking position
  targetRank    Int?     // Target ranking position
  url           String?  // URL being tracked
  lastChecked   DateTime?
  rankHistory   Json?    // Historical ranking data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([keyword])
  @@index([currentRank])
}
